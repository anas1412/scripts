#!/bin/bash

# --- Configuration ---
SCRIPTS_SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SCRIPTS_TARGET_DIR="$HOME/scripts"
REQUIRED_PYTHON_PACKAGE="google-genai"
SHELL_CONFIG_FILE="$SCRIPTS_TARGET_DIR/shell_config.sh"
# --- End Configuration ---

# Function to add or update a block of configuration in a shell file.
# It expects markers to be on their own lines.
add_or_update_config() {
    local file="$1"
    local config_name="$2" # A descriptive name for the config block (e.g., "Gemini API Key")
    local content="$3"
    local start_marker="$4"
    local end_marker="${5:-$start_marker}" # If end_marker not provided, use start_marker

    if [ ! -f "$file" ]; then
        echo "Warning: Shell config file '$file' not found. Skipping '$config_name' setup for this shell."
        return 1
    fi

    echo "Configuring '$config_name' in '$file'..."

    # Create a temporary file for sed operations
    local temp_file=$(mktemp)

    if grep -qF "$start_marker" "$file" && grep -qF "$end_marker" "$file"; then
        # Block exists, replace content between markers (including markers)
        # Using a newline escape to properly handle multiline replacement
        sed -e "/$start_marker/,/$end_marker/c\\
$start_marker\\
$content\\
$end_marker" "$file" > "$temp_file"
    else
        # Block does not exist, append it
        cp "$file" "$temp_file" # Copy existing content
        echo -e "\n$start_marker\n$content\n$end_marker" >> "$temp_file"
    fi

    # Move the temporary file back to the original file
    mv "$temp_file" "$file"
    echo "Successfully updated '$config_name' in '$file'."
}

echo "Welcome to the Custom Scripts Installation!"
echo "This script will help you set up your Gemini API key, install dependencies,"
echo "and configure helpful aliases/functions for your shell, in a cleaner way."

# 1. Check for pip3 and install Python dependencies
echo "Checking for pip3..."
if command -v pip3 &> /dev/null; then
    echo "pip3 found. Installing Python dependencies ($REQUIRED_PYTHON_PACKAGE) for your user..."
    pip3 install --user "$REQUIRED_PYTHON_PACKAGE" || {
        echo "Error: Failed to install Python package. Make sure you have Python3 and pip3 installed." >&2
        echo "If the error persists, you might need to run 'pip3 install --user $REQUIRED_PYTHON_PACKAGE' manually." >&2
        exit 1
    }
else
    echo "Warning: pip3 not found. Cannot install Python dependencies automatically." >&2
    echo "Please install Python3 and pip3, then run 'pip3 install --user $REQUIRED_PYTHON_PACKAGE' manually." >&2
fi

# 2. Prepare script directory and copy files
echo "Ensuring script directory exists: $SCRIPTS_TARGET_DIR"
mkdir -p "$SCRIPTS_TARGET_DIR" || { echo "Error: Could not create $SCRIPTS_TARGET_DIR. Check permissions." >&2; exit 1; }

echo "Copying scripts to $SCRIPTS_TARGET_DIR..."
cp "$SCRIPTS_SOURCE_DIR"/gemini_ai_helper.py "$SCRIPTS_TARGET_DIR"/ || { echo "Error copying gemini_ai_helper.py" >&2; exit 1; }
cp "$SCRIPTS_SOURCE_DIR"/gemini_try_helper.py "$SCRIPTS_TARGET_DIR"/ || { echo "Error copying gemini_try_helper.py" >&2; exit 1; }
cp "$SCRIPTS_SOURCE_DIR"/blocker "$SCRIPTS_TARGET_DIR"/ || { echo "Error copying blocker" >&2; exit 1; }

# Create and populate the shell_config.sh file
echo "Creating and populating $SHELL_CONFIG_FILE..."
cat <<EOF > "$SHELL_CONFIG_FILE"
# --- Custom Shell Functions and Aliases managed by install script ---

# AI Helper Alias
alias ai='python3 "$HOME/scripts/gemini_ai_helper.py"'

# Fix Command Function
fix() {
    local last_command
    local command_output
    local exit_status
    local scripts_dir="$HOME/scripts"

    # Get the last command from history
    if [ -n "$ZSH_VERSION" ]; then
        last_command=\$(print -r -- "\${history[\$((\$HISTCMD-1))]}")
    elif [ -n "\$BASH_VERSION" ]; then
        last_command=\$(history -p '!!' 2>/dev/null)
    else
        echo "Error: Unsupported shell. Cannot determine last command for 'fix' function." >&2
        return 1
    fi

    # Basic check to prevent fixing 'fix' itself, or empty commands
    if [[ -z "\$last_command" || "\$last_command" == "fix" ]]; then
        echo "No meaningful previous command to fix." >&2
        return 1
    fi

    echo "Attempting to re-run: \$last_command"
    local tmp_output=\$(mktemp)
    if eval "\$last_command" >"\$tmp_output" 2>&1; then
        exit_status=0
    else
        exit_status=\$?
    fi
    command_output=\$(cat "\$tmp_output")
    rm "\$tmp_output"

    if [ \$exit_status -eq 0 ]; then
        echo "The previous command completed successfully (exit code 0). No AI fix needed."
    else
        echo "The previous command failed (exit code \$exit_status)."
        echo "Sending details to AI for a suggested fix..."
        local suggested_command

        suggested_command=\$(python3 "\$scripts_dir/gemini_try_helper.py" "\$last_command" "\$command_output")

        if [ -n "\$suggested_command" ]; then
            echo -e "\nAI suggests:\n\$suggested_command"
            read -p "Execute suggested command? (y/N): " -n 1 -r
            echo
            if [[ \$REPLY =~ ^[Yy]\$ ]]; then
                eval "\$suggested_command"
            else
                echo "AI suggestion not executed."
            fi
        else
            echo "AI did not provide a suggestion or an error occurred with the AI helper."
        fi
    fi
    return \$exit_status
}

# --- End Custom Shell Functions and Aliases ---
EOF

# Make scripts executable (including the new shell_config.sh)
echo "Making scripts executable..."
chmod +x "$SCRIPTS_TARGET_DIR"/gemini_ai_helper.py "$SCRIPTS_TARGET_DIR"/gemini_try_helper.py "$SCRIPTS_TARGET_DIR"/blocker "$SHELL_CONFIG_FILE" || { echo "Error setting executable permissions." >&2; exit 1; }

# 3. Ask for Gemini API Key
read -p "Please enter your Google Gemini API Key: " gemini_api_key

# 4. Configure .bashrc and .zshrc
echo "Configuring .bashrc and .zshrc..."

# Define content blocks for .bashrc / .zshrc
API_KEY_CONTENT="export GEMINI_API_KEY=\"$gemini_api_key\""
API_KEY_START_MARKER="# --- START GEMINI API KEY ---"
API_KEY_END_MARKER="# --- END GEMINI API KEY ---"

PATH_CONTENT="export PATH=\"\$HOME/scripts:\$PATH\""
PATH_START_MARKER="# --- START CUSTOM SCRIPTS PATH ---"
PATH_END_MARKER="# --- END CUSTOM SCRIPTS PATH ---"

SHELL_SOURCE_CONTENT="source \"$SHELL_CONFIG_FILE\""
SHELL_SOURCE_START_MARKER="# --- START CUSTOM SHELL CONFIG SOURCE ---"
SHELL_SOURCE_END_MARKER="# --- END CUSTOM SHELL CONFIG SOURCE ---"

# Process both .bashrc and .zshrc
for shell_config_file in "$HOME/.bashrc" "$HOME/.zshrc"; do
    # API Key
    add_or_update_config "$shell_config_file" "Gemini API Key" "$API_KEY_CONTENT" "$API_KEY_START_MARKER" "$API_KEY_END_MARKER"
    # PATH
    add_or_update_config "$shell_config_file" "Custom Scripts PATH" "$PATH_CONTENT" "$PATH_START_MARKER" "$PATH_END_MARKER"
    # Source custom shell config
    add_or_update_config "$shell_config_file" "Custom Shell Config Source" "$SHELL_SOURCE_CONTENT" "$SHELL_SOURCE_START_MARKER" "$SHELL_SOURCE_END_MARKER"
done

echo "Installation complete!"
echo "Please restart your terminal or run 'source ~/.bashrc' (or 'source ~/.zshrc') for the changes to take effect."
echo "You can now use 'ai \"your question\"' and simply type 'fix' after a failed command."